initSidebarItems({"fn":[["cli","a wrapper around cli"],["context_switch","Do a context switch to `next_context` with the eflags register set to `eflags`. This function is called by `process::proc_yield`"],["eflags","Returns the value of eflags"],["inb","a wrapper around inb"],["inl","a wrapper around inl"],["invlpg","Flush the page from the TLB"],["irq0","A handler for IRQ 0"],["irq1","A handler for IRQ 1"],["irq10","A handler for IRQ 10"],["irq11","A handler for IRQ 11"],["irq12","A handler for IRQ 12"],["irq13","A handler for IRQ 13"],["irq14","A handler for IRQ 14"],["irq15","A handler for IRQ 15"],["irq2","A handler for IRQ 2"],["irq3","A handler for IRQ 3"],["irq4","A handler for IRQ 4"],["irq5","A handler for IRQ 5"],["irq6","A handler for IRQ 6"],["irq7","A handler for IRQ 7"],["irq8","A handler for IRQ 8"],["irq9","A handler for IRQ 9"],["ltr","a wrapper around ltr"],["outb","a wrapper around outb"],["outl","a wrapper around outl"],["page_fault_handler","The assembly handle for the page fault handler. This function calls `vmm_page_fault`."],["pit_do_init","Initialize the PIT with the given divide"],["proc_yield","An unsafe proc_yield handle that saves the context of the current process before switching. *Do not* call this function directly! Instead, use `process::proc_yield`, which is a wrapper around this function."],["sti","a wrapper around sti"],["vmm_on","Turn on VM and load cr3 with the given value"]]});