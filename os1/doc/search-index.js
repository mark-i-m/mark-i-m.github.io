var searchIndex = {};
searchIndex['rustcode'] = {"items":[[0,"","rustcode","The os1 kernel is written and compiled as a library. It is then\ncompiled and linked together with assembly files to produce a binary.\nThe binary is written to the hard disk, which is then loaded.",null,null],[5,"store_kcontext","","",null,null],[5,"_proc_yield","","",null,{"inputs":[{"name":"option"}],"output":null}],[5,"pic_irq","","",null,{"inputs":[{"name":"usize"}],"output":null}],[5,"vmm_page_fault","","",null,{"inputs":[{"name":"usize"}],"output":null}],[5,"kernel_main","","This is the entry point to the kernel. It is the first rust code that runs.",null,{"inputs":[],"output":null}],[0,"debug","","This module allows the user to print to QEMU's serial console.",null,null],[3,"Debug","rustcode::debug","A struct to write data to the console port",null,null],[17,"PORT","","Port to output to serial console",null,null],[11,"write_bytes","","Wait for the port, then write the given array of bytes",0,null],[11,"write_str","","Take a string slice and write to the serial console",0,{"inputs":[{"name":"debug"},{"name":"str"}],"output":{"name":"result"}}],[0,"bare_bones","rustcode","This module contains some basic functionality that libstd would normally\notherwise provide. Most importantly, it defines `rust_begin_unwind` which is\nused by `panic!`.",null,null],[5,"stack_exhausted","rustcode::bare_bones","",null,{"inputs":[],"output":null}],[5,"eh_personality","","",null,{"inputs":[],"output":null}],[5,"rust_begin_unwind","","This function is used by `panic!` to display an error message.",null,{"inputs":[{"name":"arguments"},{"name":"str"},{"name":"u32"}],"output":null}],[0,"data_structures","rustcode","A module containing useful data structures",null,null],[3,"ProcessQueue","rustcode::data_structures","An abstraction for any kind of process queue",null,null],[12,"head","","",1,null],[12,"tail","","",1,null],[0,"proc_queue","","",null,null],[3,"ProcessQueue","rustcode::data_structures::proc_queue","An abstraction for any kind of process queue",null,null],[12,"head","","",1,null],[12,"tail","","",1,null],[11,"new","rustcode::data_structures","Create a new, empty queue. This is a const function, so statics can have\nqueues.",1,{"inputs":[{"name":"processqueue"}],"output":{"name":"processqueue"}}],[11,"push_tail","","Push the given process to the end of the queue. O(1)",1,null],[11,"pop_head","","Pop and return the head of the queue. If this method returns a null\npointer, then the queue is empty. O(1)",1,null],[0,"concurrency","","A module for concurrency primitives",null,null],[3,"Semaphore","rustcode::data_structures::concurrency","`Semaphore` is a much more Rustic semaphore. It returns an RAII\n`SemaphoreGuard`, which automatically calls \"up\" when it goes out of\nscope. This semaphore takes ownership of the data it is guarding, so that\nRust ownership and lifetime semantics can be used to guarantee safety of\nthe resource.",null,null],[12,"inner","","",2,null],[12,"data","","",2,null],[3,"StaticSemaphore","","`StaticSemaphore` is a semaphore implementation that can be used in\nstatics. It has a const constructor.",null,null],[12,"count","","",3,null],[12,"queue","","",3,null],[3,"SemaphoreGuard","","RAII SemaphoreGuard",null,null],[12,"semaphore","","",4,null],[12,"data","","",4,null],[0,"semaphore","","A semaphore implementation based on the rust Mutex<T> type",null,null],[3,"Semaphore","rustcode::data_structures::concurrency::semaphore","`Semaphore` is a much more Rustic semaphore. It returns an RAII\n`SemaphoreGuard`, which automatically calls \"up\" when it goes out of\nscope. This semaphore takes ownership of the data it is guarding, so that\nRust ownership and lifetime semantics can be used to guarantee safety of\nthe resource.",null,null],[12,"inner","","",2,null],[12,"data","","",2,null],[3,"StaticSemaphore","","`StaticSemaphore` is a semaphore implementation that can be used in\nstatics. It has a const constructor.",null,null],[12,"count","","",3,null],[12,"queue","","",3,null],[3,"SemaphoreGuard","","RAII SemaphoreGuard",null,null],[12,"semaphore","","",4,null],[12,"data","","",4,null],[11,"new","rustcode::data_structures::concurrency","Create a new semaphore with the the given count guarding the given value",2,{"inputs":[{"name":"semaphore"},{"name":"t"},{"name":"isize"}],"output":{"name":"semaphore"}}],[11,"down","","Acquire.\nreturns an RAII guard, so no need for up()",2,{"inputs":[{"name":"semaphore"}],"output":{"name":"semaphoreguard"}}],[11,"drop","","When the semaphore goes out of scope, it destroys the contents",2,{"inputs":[{"name":"semaphore"}],"output":null}],[11,"new","","Create a new `StaticSemaphore` with the given count",3,{"inputs":[{"name":"staticsemaphore"},{"name":"isize"}],"output":{"name":"staticsemaphore"}}],[11,"down","","Acquire",3,{"inputs":[{"name":"staticsemaphore"}],"output":null}],[11,"up","","Release",3,{"inputs":[{"name":"staticsemaphore"}],"output":null}],[11,"destroy","","Clean up.\nCannot implement Drop here because we want to be able\nto create a static semaphore.",3,{"inputs":[{"name":"staticsemaphore"}],"output":null}],[11,"new","","Create a guard referring to the given semaphore and data",4,{"inputs":[{"name":"semaphoreguard"},{"name":"staticsemaphore"},{"name":"unsafecell"}],"output":{"name":"semaphoreguard"}}],[11,"drop","","`SemaphoreGuard` is RAII, so dropping the guard calls up",4,{"inputs":[{"name":"semaphoreguard"}],"output":null}],[11,"deref","","",4,{"inputs":[{"name":"semaphoreguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",4,{"inputs":[{"name":"semaphoreguard"}],"output":{"name":"t"}}],[0,"machine","rustcode","This is the Rust-side handle for assembly code. Most of the FFI handles are\nin this module.",null,null],[5,"inb","rustcode::machine","a wrapper around inb",null,null],[5,"inl","","a wrapper around inl",null,null],[5,"outb","","a wrapper around outb",null,null],[5,"ltr","","a wrapper around ltr",null,null],[5,"pit_do_init","","Initialize the PIT with the given divide",null,null],[5,"vmm_on","","Turn on VM and load cr3 with the given value",null,null],[5,"invlpg","","Flush the page from the TLB",null,null],[5,"cli","","a wrapper around cli",null,null],[5,"sti","","a wrapper around sti",null,null],[5,"irq0","","A handler for IRQ 0",null,null],[5,"irq1","","A handler for IRQ 1",null,null],[5,"irq2","","A handler for IRQ 2",null,null],[5,"irq3","","A handler for IRQ 3",null,null],[5,"irq4","","A handler for IRQ 4",null,null],[5,"irq5","","A handler for IRQ 5",null,null],[5,"irq6","","A handler for IRQ 6",null,null],[5,"irq7","","A handler for IRQ 7",null,null],[5,"irq8","","A handler for IRQ 8",null,null],[5,"irq9","","A handler for IRQ 9",null,null],[5,"irq10","","A handler for IRQ 10",null,null],[5,"irq11","","A handler for IRQ 11",null,null],[5,"irq12","","A handler for IRQ 12",null,null],[5,"irq13","","A handler for IRQ 13",null,null],[5,"irq14","","A handler for IRQ 14",null,null],[5,"irq15","","A handler for IRQ 15",null,null],[5,"proc_yield","","An unsafe proc_yield handle that saves the context of the current\nprocess before switching. *Do not* call this function directly! Instead,\nuse `process::proc_yield`, which is a wrapper around this function.",null,null],[5,"context_switch","","Do a context switch to `next_context` with the eflags register set to\n`eflags`. This function is called by `process::proc_yield`",null,null],[5,"eflags","","Returns the value of eflags",null,null],[5,"page_fault_handler","","The assembly handle for the page fault handler. This function calls\n`vmm_page_fault`.",null,null],[0,"memory","rustcode","",null,null],[3,"AddressSpace","rustcode::memory","",null,null],[12,"page_dir","","",5,null],[12,"kmap_index","","",5,null],[5,"vmm_page_fault","","",null,{"inputs":[{"name":"usize"}],"output":null}],[5,"init","","",null,{"inputs":[],"output":null}],[0,"rust_alloc","","",null,null],[5,"__rust_allocate","rustcode::memory::rust_alloc","Return a pointer to `size` bytes of memory aligned to `align`.",null,null],[5,"__rust_deallocate","","Deallocates the memory referenced by `ptr`.",null,null],[5,"__rust_reallocate","","Resize the allocation referenced by `ptr` to `size` bytes.",null,null],[5,"__rust_reallocate_inplace","","Resize the allocation referenced by `ptr` to `size` bytes.",null,null],[5,"__rust_usable_size","","Returns the usable size of an allocation created with the specified the\n`size` and `align`.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"__rust_stats_print","","Prints implementation-defined allocator statistics.",null,{"inputs":[],"output":null}],[0,"heap","rustcode::memory","",null,null],[3,"Block","rustcode::memory::heap","",null,null],[5,"round_to_block_align","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[5,"round_to_n","","",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"init","","",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":null}],[5,"malloc","","Return a pointer to `size` bytes of memory aligned to `align`.",null,null],[5,"free","","Deallocates the memory referenced by `ptr`.",null,null],[5,"usable_size","","Returns the usable size of an allocation created with the specified the\n`size` and `align`.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"print_stats","","Prints implementation-defined allocator statistics.",null,{"inputs":[],"output":null}],[5,"get_block_stats","","",null,null],[7,"BLOCK_ALIGN","","",null,null],[7,"START","","",null,null],[7,"END","","",null,null],[7,"free_list","","",null,null],[7,"SUCC_MALLOCS","","",null,null],[7,"FAIL_MALLOCS","","",null,null],[7,"FREES","","",null,null],[17,"DEBUG","","",null,null],[11,"get_head","","",6,{"inputs":[{"name":"block"}],"output":{"name":"usize"}}],[11,"set_head","","",6,{"inputs":[{"name":"block"},{"name":"usize"}],"output":null}],[11,"get_foot","","",6,{"inputs":[{"name":"block"}],"output":{"name":"usize"}}],[11,"set_foot","","",6,{"inputs":[{"name":"block"},{"name":"usize"}],"output":null}],[11,"get_free_bits","","",6,{"inputs":[{"name":"block"}],"output":{"name":"u8"}}],[11,"set_next","","",6,null],[11,"set_prev","","",6,null],[11,"is_free","","",6,{"inputs":[{"name":"block"}],"output":{"name":"bool"}}],[11,"mark_free","","",6,{"inputs":[{"name":"block"}],"output":null}],[11,"mark_used","","",6,{"inputs":[{"name":"block"}],"output":null}],[11,"get_size","","",6,{"inputs":[{"name":"block"}],"output":{"name":"usize"}}],[11,"set_size","","",6,{"inputs":[{"name":"block"},{"name":"usize"}],"output":null}],[11,"get_contiguous_next","","",6,null],[11,"get_contiguous_prev","","",6,null],[11,"get_free_next","","",6,null],[11,"get_free_prev","","",6,null],[11,"remove","","",6,{"inputs":[{"name":"block"}],"output":null}],[11,"insert","","",6,{"inputs":[{"name":"block"}],"output":null}],[11,"merge_with_next","","",6,{"inputs":[{"name":"block"}],"output":null}],[11,"split","","",6,{"inputs":[{"name":"block"},{"name":"usize"}],"output":null}],[11,"is_match","","",6,null],[0,"physmem","rustcode::memory","",null,null],[3,"Frame","rustcode::memory::physmem","",null,null],[12,"mem","","",7,null],[3,"FrameInfoSection","","",null,null],[12,"arr","","",8,null],[3,"FrameInfo","","",null,null],[12,"info","","",9,null],[5,"init","","",null,{"inputs":[{"name":"usize"}],"output":null}],[7,"FRAME_INFO","","",null,null],[7,"FREE_FRAMES","","",null,null],[11,"alloc","","",7,{"inputs":[{"name":"frame"}],"output":{"name":"usize"}}],[11,"free","","",7,{"inputs":[{"name":"frame"},{"name":"usize"}],"output":null}],[11,"index","","",7,{"inputs":[{"name":"frame"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"index_mut","","",7,{"inputs":[{"name":"frame"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"index","","",8,{"inputs":[{"name":"frameinfosection"},{"name":"usize"}],"output":{"name":"frameinfo"}}],[11,"index_mut","","",8,{"inputs":[{"name":"frameinfosection"},{"name":"usize"}],"output":{"name":"frameinfo"}}],[11,"alloc","","",9,{"inputs":[{"name":"frameinfo"}],"output":null}],[11,"free","","",9,{"inputs":[{"name":"frameinfo"}],"output":null}],[11,"get_index","","",9,{"inputs":[{"name":"frameinfo"}],"output":{"name":"usize"}}],[11,"set_free","","",9,{"inputs":[{"name":"frameinfo"},{"name":"bool"}],"output":null}],[11,"get_next_free","","",9,{"inputs":[{"name":"frameinfo"}],"output":{"name":"usize"}}],[11,"set_next_free","","",9,{"inputs":[{"name":"frameinfo"},{"name":"usize"}],"output":null}],[0,"virtmem","rustcode::memory","",null,null],[3,"AddressSpace","rustcode::memory::virtmem","",null,null],[12,"page_dir","","",5,null],[12,"kmap_index","","",5,null],[3,"PagingEntry","","",null,null],[12,"entry","","",10,null],[3,"VMTable","","",null,null],[12,"entries","","",11,null],[5,"init","","",null,{"inputs":[],"output":null}],[5,"vmm_page_fault","","",null,{"inputs":[{"name":"usize"}],"output":null}],[7,"PDE0","","",null,null],[7,"PDE1","","",null,null],[7,"VMM_ON","","",null,null],[11,"clone","","",10,{"inputs":[{"name":"pagingentry"}],"output":{"name":"pagingentry"}}],[11,"new","rustcode::memory","",5,{"inputs":[{"name":"addressspace"}],"output":{"name":"addressspace"}}],[11,"map","","",5,{"inputs":[{"name":"addressspace"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"kmap","","",5,{"inputs":[{"name":"addressspace"},{"name":"usize"}],"output":{"name":"frame"}}],[11,"unmap","","",5,{"inputs":[{"name":"addressspace"},{"name":"usize"}],"output":null}],[11,"activate","","",5,{"inputs":[{"name":"addressspace"}],"output":null}],[11,"clear","","",5,{"inputs":[{"name":"addressspace"}],"output":null}],[11,"drop","","",5,{"inputs":[{"name":"addressspace"}],"output":null}],[11,"new","rustcode::memory::virtmem","",10,{"inputs":[{"name":"pagingentry"}],"output":{"name":"pagingentry"}}],[11,"set_present","","",10,{"inputs":[{"name":"pagingentry"},{"name":"bool"}],"output":null}],[11,"set_read_write","","",10,{"inputs":[{"name":"pagingentry"},{"name":"bool"}],"output":null}],[11,"set_privelege_level","","",10,{"inputs":[{"name":"pagingentry"},{"name":"bool"}],"output":null}],[11,"set_caching","","",10,{"inputs":[{"name":"pagingentry"},{"name":"bool"}],"output":null}],[11,"set_flag","","",10,{"inputs":[{"name":"pagingentry"},{"name":"u8"},{"name":"bool"}],"output":null}],[11,"set_address","","",10,{"inputs":[{"name":"pagingentry"},{"name":"usize"}],"output":null}],[11,"is_flag","","",10,{"inputs":[{"name":"pagingentry"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"get_address","","",10,{"inputs":[{"name":"pagingentry"}],"output":{"name":"usize"}}],[11,"free","","",10,{"inputs":[{"name":"pagingentry"},{"name":"bool"}],"output":null}],[11,"new","","",11,null],[11,"index","","",11,{"inputs":[{"name":"vmtable"},{"name":"usize"}],"output":{"name":"pagingentry"}}],[11,"index_mut","","",11,{"inputs":[{"name":"vmtable"},{"name":"usize"}],"output":{"name":"pagingentry"}}],[0,"regionmap","rustcode::memory","",null,null],[3,"MemoryListEntry","rustcode::memory::regionmap","",null,null],[12,"base_l","","",12,null],[12,"base_h","","",12,null],[12,"length_l","","",12,null],[12,"length_h","","",12,null],[12,"region_type","","",12,null],[12,"acpi","","",12,null],[3,"Region","","",null,null],[12,"start","","",13,null],[12,"end","","",13,null],[12,"usable","","",13,null],[12,"next","","",13,null],[3,"RegionMap","","",null,null],[12,"list","","",14,null],[12,"index","","",14,null],[7,"memory_map_count","","",null,null],[7,"memory_map","","",null,null],[11,"new","","",13,{"inputs":[{"name":"region"},{"name":"usize"}],"output":{"name":"region"}}],[11,"find","","",13,{"inputs":[{"name":"region"},{"name":"usize"}],"output":{"name":"option"}}],[11,"find_next","","",13,{"inputs":[{"name":"region"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"dump","","",13,{"inputs":[{"name":"region"}],"output":null}],[11,"new","","",14,null],[11,"next","","",14,{"inputs":[{"name":"regionmap"}],"output":{"name":"option"}}],[0,"process","rustcode","",null,null],[3,"Process","rustcode::process","",null,null],[12,"name","","",15,null],[12,"pid","","",15,null],[12,"run","","",15,null],[12,"state","","",15,null],[12,"stack","","",15,null],[12,"kcontext","","",15,null],[12,"addr_space","","",15,null],[12,"disable_cnt","","",15,null],[12,"next_proc","","",15,null],[4,"State","","",null,null],[13,"INIT","","",16,null],[13,"READY","","",16,null],[13,"RUNNING","","",16,null],[13,"BLOCKED","","",16,null],[13,"TERMINATED","","",16,null],[5,"init","","",null,{"inputs":[],"output":null}],[5,"start_proc","","",null,{"inputs":[],"output":null}],[5,"proc_yield","","",null,{"inputs":[{"name":"option"}],"output":null}],[5,"_proc_yield","","",null,{"inputs":[{"name":"option"}],"output":null}],[5,"exit","","",null,{"inputs":[{"name":"usize"}],"output":null}],[0,"context","","",null,null],[3,"KContext","rustcode::process::context","",null,null],[12,"edi","","",17,null],[12,"esi","","",17,null],[12,"ebp","","",17,null],[12,"esp","","",17,null],[12,"ebx","","",17,null],[12,"edx","","",17,null],[12,"ecx","","",17,null],[12,"eax","","",17,null],[5,"store_kcontext","","",null,null],[11,"clone","","",17,{"inputs":[{"name":"kcontext"}],"output":{"name":"kcontext"}}],[11,"new","","",17,{"inputs":[{"name":"kcontext"}],"output":{"name":"kcontext"}}],[0,"current","rustcode::process","",null,null],[5,"init","rustcode::process::current","",null,{"inputs":[],"output":null}],[7,"CURRENT_PROCESS","","",null,null],[0,"ready_queue","rustcode::process","",null,null],[5,"init","rustcode::process::ready_queue","",null,{"inputs":[],"output":null}],[5,"make_ready","","",null,null],[5,"get_next","","",null,null],[7,"READY_QUEUE","","",null,null],[0,"init","rustcode::process","",null,null],[5,"run","rustcode::process::init","",null,{"inputs":[{"name":"process"}],"output":{"name":"usize"}}],[0,"idle","rustcode::process","",null,null],[5,"init","rustcode::process::idle","",null,{"inputs":[],"output":null}],[5,"run","","",null,{"inputs":[{"name":"process"}],"output":{"name":"usize"}}],[7,"IDLE_PROCESS","","",null,null],[0,"reaper","rustcode::process","",null,null],[5,"run","rustcode::process::reaper","",null,{"inputs":[{"name":"process"}],"output":{"name":"usize"}}],[5,"reaper_add","","",null,null],[5,"init","","",null,{"inputs":[],"output":null}],[7,"REAPER_SEMAPHORE","","",null,null],[7,"REAPER_QUEUE","","",null,null],[0,"user","rustcode::process","",null,null],[5,"run","rustcode::process::user","",null,{"inputs":[{"name":"process"}],"output":{"name":"usize"}}],[5,"get_prev","","",null,null],[5,"get_next","","",null,null],[5,"run2","","",null,{"inputs":[{"name":"process"}],"output":{"name":"usize"}}],[7,"current","","",null,null],[7,"s1","","",null,null],[7,"s2","","",null,null],[17,"ROWS","","",null,null],[17,"COLS","","",null,null],[7,"CURRENT_PROCESS","rustcode::process","",null,null],[7,"NEXT_ID","","",null,null],[17,"STACK_SIZE","","",null,null],[11,"clone","","",16,{"inputs":[{"name":"state"}],"output":{"name":"state"}}],[11,"new","","",15,null],[11,"get_stack","","",15,{"inputs":[{"name":"process"}],"output":null}],[11,"set_state","","",15,{"inputs":[{"name":"process"},{"name":"state"}],"output":null}],[11,"drop","","",15,{"inputs":[{"name":"process"}],"output":null}],[11,"fmt","","",15,{"inputs":[{"name":"process"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"process"},{"name":"process"}],"output":{"name":"bool"}}],[0,"vga","rustcode","",null,null],[0,"vga","rustcode::vga","",null,null],[3,"VGAChar","rustcode::vga::vga","",null,null],[12,"ch","","",18,null],[12,"color","","",18,null],[3,"VGABuff","","",null,null],[12,"buff","","",19,null],[3,"VGA","","",null,null],[12,"buff","","",20,null],[12,"fg","","",20,null],[12,"bg","","",20,null],[12,"cursor","","",20,null],[4,"Color","","",null,null],[13,"Black","","",21,null],[13,"Blue","","",21,null],[13,"Green","","",21,null],[13,"Cyan","","",21,null],[13,"Red","","",21,null],[13,"Pink","","",21,null],[13,"Brown","","",21,null],[13,"LightGray","","",21,null],[13,"DarkGray","","",21,null],[13,"LightBlue","","",21,null],[13,"LightGreen","","",21,null],[13,"LightCyan","","",21,null],[13,"LightRed","","",21,null],[13,"LightPink","","",21,null],[13,"Yellow","","",21,null],[13,"White","","",21,null],[17,"ROWS","","",null,null],[17,"COLS","","",null,null],[17,"VGA_BUFFER","","",null,null],[11,"clone","","",21,{"inputs":[{"name":"color"}],"output":{"name":"color"}}],[11,"clone","","",18,{"inputs":[{"name":"vgachar"}],"output":{"name":"vgachar"}}],[11,"clone","","",19,{"inputs":[{"name":"vgabuff"}],"output":{"name":"vgabuff"}}],[11,"get_buff","","",19,{"inputs":[{"name":"vgabuff"}],"output":{"name":"vgabuff"}}],[11,"pack_colors","","",19,{"inputs":[{"name":"vgabuff"},{"name":"color"},{"name":"color"}],"output":{"name":"u8"}}],[11,"put_char","","",19,null],[11,"clone","","",20,{"inputs":[{"name":"vga"}],"output":{"name":"vga"}}],[11,"get_vga","","",20,{"inputs":[{"name":"vga"}],"output":{"name":"vga"}}],[11,"clear_screen","","",20,{"inputs":[{"name":"vga"}],"output":null}],[11,"fill_rect","","",20,null],[11,"put_char","","",20,{"inputs":[{"name":"vga"},{"name":"char"}],"output":null}],[11,"set_fg_color","","",20,{"inputs":[{"name":"vga"},{"name":"color"}],"output":null}],[11,"set_bg_color","","",20,{"inputs":[{"name":"vga"},{"name":"color"}],"output":null}],[11,"set_cursor","","",20,null],[0,"window","rustcode::vga","",null,null],[3,"Window","rustcode::vga::window","",null,null],[12,"height","","",22,null],[12,"width","","",22,null],[12,"pos","","",22,null],[12,"cursor","","",22,null],[12,"vga","","",22,null],[4,"Color","","",null,null],[13,"Black","","",21,null],[13,"Blue","","",21,null],[13,"Green","","",21,null],[13,"Cyan","","",21,null],[13,"Red","","",21,null],[13,"Pink","","",21,null],[13,"Brown","","",21,null],[13,"LightGray","","",21,null],[13,"DarkGray","","",21,null],[13,"LightBlue","","",21,null],[13,"LightGreen","","",21,null],[13,"LightCyan","","",21,null],[13,"LightRed","","",21,null],[13,"LightPink","","",21,null],[13,"Yellow","","",21,null],[13,"White","","",21,null],[11,"clone","","",22,{"inputs":[{"name":"window"}],"output":{"name":"window"}}],[11,"new","","",22,null],[11,"clear_screen","","",22,{"inputs":[{"name":"window"}],"output":null}],[11,"paint","","",22,{"inputs":[{"name":"window"}],"output":null}],[11,"put_char","","",22,{"inputs":[{"name":"window"},{"name":"char"}],"output":null}],[11,"put_str","","",22,{"inputs":[{"name":"window"},{"name":"str"}],"output":null}],[11,"set_fg_color","","",22,{"inputs":[{"name":"window"},{"name":"color"}],"output":null}],[11,"set_bg_color","","",22,{"inputs":[{"name":"window"},{"name":"color"}],"output":null}],[11,"set_cursor","","",22,null],[0,"interrupts","rustcode","This module contains everything needed for interrupts",null,null],[5,"on","rustcode::interrupts","",null,{"inputs":[],"output":null}],[5,"off","","",null,{"inputs":[],"output":null}],[5,"add_trap_handler","","",null,null],[5,"init","","Initialize interrupts. Set the PIT frequency to `pit_hz`",null,{"inputs":[{"name":"usize"}],"output":null}],[0,"idt","","This module contains IDT stuff",null,null],[3,"TableDescriptor","rustcode::interrupts::idt","A descriptor for use in with instructions like `lgdt` or `lidt`",null,null],[12,"size","","",23,null],[12,"location","","",23,null],[3,"IDTDescr","","An entry in the IDT",null,null],[12,"offset_1","","",24,null],[12,"selector","","",24,null],[12,"zero","","",24,null],[12,"type_attr","","",24,null],[12,"offset_2","","",24,null],[5,"add_interrupt_handler","","",null,null],[5,"add_trap_handler","","",null,null],[7,"kernelCodeSeg","","",null,null],[7,"idt","","",null,null],[11,"clone","","",23,{"inputs":[{"name":"tabledescriptor"}],"output":{"name":"tabledescriptor"}}],[11,"clone","","",24,{"inputs":[{"name":"idtdescr"}],"output":{"name":"idtdescr"}}],[11,"new","","Create an empty `IDTDescr`",24,{"inputs":[{"name":"idtdescr"}],"output":{"name":"idtdescr"}}],[11,"set_offset","","",24,{"inputs":[{"name":"idtdescr"},{"name":"u32"}],"output":null}],[11,"set_type_attr","","",24,{"inputs":[{"name":"idtdescr"},{"name":"bool"},{"name":"u8"},{"name":"bool"},{"name":"u8"}],"output":null}],[11,"set_selector","","",24,{"inputs":[{"name":"idtdescr"},{"name":"u16"}],"output":null}],[0,"process","rustcode::interrupts","",null,null],[5,"on","rustcode::interrupts::process","",null,{"inputs":[],"output":null}],[5,"off","","",null,{"inputs":[],"output":null}],[5,"start_irq","","",null,{"inputs":[],"output":null}],[5,"end_irq","","",null,{"inputs":[],"output":null}],[0,"pit","rustcode::interrupts","",null,null],[5,"init","rustcode::interrupts::pit","",null,{"inputs":[{"name":"usize"}],"output":null}],[5,"handler","","",null,{"inputs":[],"output":null}],[5,"seconds","","",null,{"inputs":[],"output":{"name":"usize"}}],[7,"hz","","",null,null],[7,"JIFFIES","","",null,null],[17,"FREQ","","",null,null],[0,"pic","rustcode::interrupts","",null,null],[5,"init","rustcode::interrupts::pic","",null,{"inputs":[],"output":null}],[5,"pic_eoi","","",null,{"inputs":[{"name":"u8"}],"output":null}],[5,"pic_irq","","",null,{"inputs":[{"name":"usize"}],"output":null}],[17,"C1","","",null,null],[17,"D1","","",null,null],[17,"C2","","",null,null],[17,"D2","","",null,null],[17,"FIRST_IDT","","",null,null],[14,"printf!","rustcode","A macro for printing using format strings to the console\nwhen interrupts are enabled",null,null],[14,"bootlog!","","A macro for printing using format strings to the console\nwhen interrupts are not enabled",null,null]],"paths":[[3,"Debug"],[3,"ProcessQueue"],[3,"Semaphore"],[3,"StaticSemaphore"],[3,"SemaphoreGuard"],[3,"AddressSpace"],[3,"Block"],[3,"Frame"],[3,"FrameInfoSection"],[3,"FrameInfo"],[3,"PagingEntry"],[3,"VMTable"],[3,"MemoryListEntry"],[3,"Region"],[3,"RegionMap"],[3,"Process"],[4,"State"],[3,"KContext"],[3,"VGAChar"],[3,"VGABuff"],[3,"VGA"],[4,"Color"],[3,"Window"],[3,"TableDescriptor"],[3,"IDTDescr"]]};
initSearch(searchIndex);
